'use client';
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ChatHistorySidebar from "@/components/ChatHistorySidebar";
import { ChatProvider } from "@/contexts/ChatContext";
import { Header } from "@/components/header";
import React, { useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [selectedModel, setSelectedModel] = useState<string>("gpt-4.1");

  const handleModelChange = (model: string) => {
    setSelectedModel(model);
    // Potentially persist this choice to localStorage or notify other components
  };

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} font-sans antialiased`}
      >
        <ChatProvider>
          <div className="flex flex-col h-screen bg-background text-foreground">
            <Header selectedModel={selectedModel} onModelChange={handleModelChange} />
            <div className="flex flex-row flex-1 overflow-hidden">
              <ChatHistorySidebar />
              <main className="flex-1 overflow-y-auto">
                {React.Children.map(children, (child) => {
                  if (React.isValidElement(child)) {
                    // @ts-ignore - Acknowledging this might need a more robust solution
                    return React.cloneElement(child, { selectedModel });
                  }
                  return child;
                })}
              </main>
            </div>
          </div>
        </ChatProvider>
      </body>
    </html>
  );
}
